'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5466
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsSage"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsSage
    Inherits Global.System.Data.DataSet
    
    Private tabletblAcctCode_0 As tblAcctCode_0DataTable
    
    Private tabletblAcctCode_3 As tblAcctCode_3DataTable
    
    Private tabletblAcctCode_4 As tblAcctCode_4DataTable
    
    Private tabletblAcctCode_5 As tblAcctCode_5DataTable
    
    Private tabletblAcctCode_9 As tblAcctCode_9DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblAcctCode_0")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_0DataTable(ds.Tables("tblAcctCode_0")))
            End If
            If (Not (ds.Tables("tblAcctCode_3")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_3DataTable(ds.Tables("tblAcctCode_3")))
            End If
            If (Not (ds.Tables("tblAcctCode_4")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_4DataTable(ds.Tables("tblAcctCode_4")))
            End If
            If (Not (ds.Tables("tblAcctCode_5")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_5DataTable(ds.Tables("tblAcctCode_5")))
            End If
            If (Not (ds.Tables("tblAcctCode_9")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_9DataTable(ds.Tables("tblAcctCode_9")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAcctCode_0() As tblAcctCode_0DataTable
        Get
            Return Me.tabletblAcctCode_0
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAcctCode_3() As tblAcctCode_3DataTable
        Get
            Return Me.tabletblAcctCode_3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAcctCode_4() As tblAcctCode_4DataTable
        Get
            Return Me.tabletblAcctCode_4
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAcctCode_5() As tblAcctCode_5DataTable
        Get
            Return Me.tabletblAcctCode_5
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAcctCode_9() As tblAcctCode_9DataTable
        Get
            Return Me.tabletblAcctCode_9
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsSage = CType(MyBase.Clone,dsSage)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblAcctCode_0")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_0DataTable(ds.Tables("tblAcctCode_0")))
            End If
            If (Not (ds.Tables("tblAcctCode_3")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_3DataTable(ds.Tables("tblAcctCode_3")))
            End If
            If (Not (ds.Tables("tblAcctCode_4")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_4DataTable(ds.Tables("tblAcctCode_4")))
            End If
            If (Not (ds.Tables("tblAcctCode_5")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_5DataTable(ds.Tables("tblAcctCode_5")))
            End If
            If (Not (ds.Tables("tblAcctCode_9")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcctCode_9DataTable(ds.Tables("tblAcctCode_9")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblAcctCode_0 = CType(MyBase.Tables("tblAcctCode_0"),tblAcctCode_0DataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAcctCode_0) Is Nothing) Then
                Me.tabletblAcctCode_0.InitVars
            End If
        End If
        Me.tabletblAcctCode_3 = CType(MyBase.Tables("tblAcctCode_3"),tblAcctCode_3DataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAcctCode_3) Is Nothing) Then
                Me.tabletblAcctCode_3.InitVars
            End If
        End If
        Me.tabletblAcctCode_4 = CType(MyBase.Tables("tblAcctCode_4"),tblAcctCode_4DataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAcctCode_4) Is Nothing) Then
                Me.tabletblAcctCode_4.InitVars
            End If
        End If
        Me.tabletblAcctCode_5 = CType(MyBase.Tables("tblAcctCode_5"),tblAcctCode_5DataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAcctCode_5) Is Nothing) Then
                Me.tabletblAcctCode_5.InitVars
            End If
        End If
        Me.tabletblAcctCode_9 = CType(MyBase.Tables("tblAcctCode_9"),tblAcctCode_9DataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAcctCode_9) Is Nothing) Then
                Me.tabletblAcctCode_9.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsSage"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsSage.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblAcctCode_0 = New tblAcctCode_0DataTable
        MyBase.Tables.Add(Me.tabletblAcctCode_0)
        Me.tabletblAcctCode_3 = New tblAcctCode_3DataTable
        MyBase.Tables.Add(Me.tabletblAcctCode_3)
        Me.tabletblAcctCode_4 = New tblAcctCode_4DataTable
        MyBase.Tables.Add(Me.tabletblAcctCode_4)
        Me.tabletblAcctCode_5 = New tblAcctCode_5DataTable
        MyBase.Tables.Add(Me.tabletblAcctCode_5)
        Me.tabletblAcctCode_9 = New tblAcctCode_9DataTable
        MyBase.Tables.Add(Me.tabletblAcctCode_9)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAcctCode_0() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAcctCode_3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAcctCode_4() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAcctCode_5() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAcctCode_9() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsSage = New dsSage
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tblAcctCode_0RowChangeEventHandler(ByVal sender As Object, ByVal e As tblAcctCode_0RowChangeEvent)
    
    Public Delegate Sub tblAcctCode_3RowChangeEventHandler(ByVal sender As Object, ByVal e As tblAcctCode_3RowChangeEvent)
    
    Public Delegate Sub tblAcctCode_4RowChangeEventHandler(ByVal sender As Object, ByVal e As tblAcctCode_4RowChangeEvent)
    
    Public Delegate Sub tblAcctCode_5RowChangeEventHandler(ByVal sender As Object, ByVal e As tblAcctCode_5RowChangeEvent)
    
    Public Delegate Sub tblAcctCode_9RowChangeEventHandler(ByVal sender As Object, ByVal e As tblAcctCode_9RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAcctCode_0DataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAcctCode_0Row)
        
        Private columnsCodeID As Global.System.Data.DataColumn
        
        Private columnsStatus As Global.System.Data.DataColumn
        
        Private columnsTitle As Global.System.Data.DataColumn
        
        Private columnsShortTitle As Global.System.Data.DataColumn
        
        Private columnsType As Global.System.Data.DataColumn
        
        Private columnsDesignationCode As Global.System.Data.DataColumn
        
        Private columnsLastCheckNum As Global.System.Data.DataColumn
        
        Private columnsCheckReminder As Global.System.Data.DataColumn
        
        Private columnsForm990LineNum As Global.System.Data.DataColumn
        
        Private columnn990Ln As Global.System.Data.DataColumn
        
        Private columns990Part As Global.System.Data.DataColumn
        
        Private columnsCurrencyIDf As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumEZ As Global.System.Data.DataColumn
        
        Private columnn990LnEZ As Global.System.Data.DataColumn
        
        Private columns990PartEZ As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumP7 As Global.System.Data.DataColumn
        
        Private columnn990LnP7 As Global.System.Data.DataColumn
        
        Private columns990PartP7 As Global.System.Data.DataColumn
        
        Private columns990ColiP7 As Global.System.Data.DataColumn
        
        Private columns990ColAP7 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAcctCode_0"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCodeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCodeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sShortTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsShortTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDesignationCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDesignationCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sLastCheckNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsLastCheckNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCheckReminderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCheckReminder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990Ln
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990Part
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCurrencyIDfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCurrencyIDf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColiP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColiP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColAP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColAP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAcctCode_0Row
            Get
                Return CType(Me.Rows(index),tblAcctCode_0Row)
            End Get
        End Property
        
        Public Event tblAcctCode_0RowChanging As tblAcctCode_0RowChangeEventHandler
        
        Public Event tblAcctCode_0RowChanged As tblAcctCode_0RowChangeEventHandler
        
        Public Event tblAcctCode_0RowDeleting As tblAcctCode_0RowChangeEventHandler
        
        Public Event tblAcctCode_0RowDeleted As tblAcctCode_0RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAcctCode_0Row(ByVal row As tblAcctCode_0Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAcctCode_0Row( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As tblAcctCode_0Row
            Dim rowtblAcctCode_0Row As tblAcctCode_0Row = CType(Me.NewRow,tblAcctCode_0Row)
            Dim columnValuesArray() As Object = New Object() {sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheckNum, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990LineNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990ColiP7, s990ColAP7}
            rowtblAcctCode_0Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAcctCode_0Row)
            Return rowtblAcctCode_0Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAcctCode_0DataTable = CType(MyBase.Clone,tblAcctCode_0DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAcctCode_0DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsCodeID = MyBase.Columns("sCodeID")
            Me.columnsStatus = MyBase.Columns("sStatus")
            Me.columnsTitle = MyBase.Columns("sTitle")
            Me.columnsShortTitle = MyBase.Columns("sShortTitle")
            Me.columnsType = MyBase.Columns("sType")
            Me.columnsDesignationCode = MyBase.Columns("sDesignationCode")
            Me.columnsLastCheckNum = MyBase.Columns("sLastCheckNum")
            Me.columnsCheckReminder = MyBase.Columns("sCheckReminder")
            Me.columnsForm990LineNum = MyBase.Columns("sForm990LineNum")
            Me.columnn990Ln = MyBase.Columns("n990Ln")
            Me.columns990Part = MyBase.Columns("s990Part")
            Me.columnsCurrencyIDf = MyBase.Columns("sCurrencyIDf")
            Me.columnsForm990LineNumEZ = MyBase.Columns("sForm990LineNumEZ")
            Me.columnn990LnEZ = MyBase.Columns("n990LnEZ")
            Me.columns990PartEZ = MyBase.Columns("s990PartEZ")
            Me.columnsForm990LineNumP7 = MyBase.Columns("sForm990LineNumP7")
            Me.columnn990LnP7 = MyBase.Columns("n990LnP7")
            Me.columns990PartP7 = MyBase.Columns("s990PartP7")
            Me.columns990ColiP7 = MyBase.Columns("s990ColiP7")
            Me.columns990ColAP7 = MyBase.Columns("s990ColAP7")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsCodeID = New Global.System.Data.DataColumn("sCodeID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCodeID)
            Me.columnsStatus = New Global.System.Data.DataColumn("sStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsStatus)
            Me.columnsTitle = New Global.System.Data.DataColumn("sTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsTitle)
            Me.columnsShortTitle = New Global.System.Data.DataColumn("sShortTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsShortTitle)
            Me.columnsType = New Global.System.Data.DataColumn("sType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsType)
            Me.columnsDesignationCode = New Global.System.Data.DataColumn("sDesignationCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDesignationCode)
            Me.columnsLastCheckNum = New Global.System.Data.DataColumn("sLastCheckNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsLastCheckNum)
            Me.columnsCheckReminder = New Global.System.Data.DataColumn("sCheckReminder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCheckReminder)
            Me.columnsForm990LineNum = New Global.System.Data.DataColumn("sForm990LineNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNum)
            Me.columnn990Ln = New Global.System.Data.DataColumn("n990Ln", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990Ln)
            Me.columns990Part = New Global.System.Data.DataColumn("s990Part", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990Part)
            Me.columnsCurrencyIDf = New Global.System.Data.DataColumn("sCurrencyIDf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCurrencyIDf)
            Me.columnsForm990LineNumEZ = New Global.System.Data.DataColumn("sForm990LineNumEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumEZ)
            Me.columnn990LnEZ = New Global.System.Data.DataColumn("n990LnEZ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnEZ)
            Me.columns990PartEZ = New Global.System.Data.DataColumn("s990PartEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartEZ)
            Me.columnsForm990LineNumP7 = New Global.System.Data.DataColumn("sForm990LineNumP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumP7)
            Me.columnn990LnP7 = New Global.System.Data.DataColumn("n990LnP7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnP7)
            Me.columns990PartP7 = New Global.System.Data.DataColumn("s990PartP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartP7)
            Me.columns990ColiP7 = New Global.System.Data.DataColumn("s990ColiP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColiP7)
            Me.columns990ColAP7 = New Global.System.Data.DataColumn("s990ColAP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColAP7)
            Me.columnsCodeID.AllowDBNull = false
            Me.columnsCodeID.MaxLength = 5
            Me.columnsStatus.AllowDBNull = false
            Me.columnsStatus.MaxLength = 2
            Me.columnsTitle.AllowDBNull = false
            Me.columnsTitle.MaxLength = 60
            Me.columnsShortTitle.AllowDBNull = false
            Me.columnsShortTitle.MaxLength = 15
            Me.columnsType.AllowDBNull = false
            Me.columnsType.MaxLength = 3
            Me.columnsDesignationCode.AllowDBNull = false
            Me.columnsDesignationCode.MaxLength = 3
            Me.columnsLastCheckNum.AllowDBNull = false
            Me.columnsLastCheckNum.MaxLength = 30
            Me.columnsCheckReminder.AllowDBNull = false
            Me.columnsCheckReminder.MaxLength = 30
            Me.columnsForm990LineNum.AllowDBNull = false
            Me.columnsForm990LineNum.MaxLength = 25
            Me.columnn990Ln.AllowDBNull = false
            Me.columns990Part.AllowDBNull = false
            Me.columns990Part.MaxLength = 15
            Me.columnsCurrencyIDf.AllowDBNull = false
            Me.columnsCurrencyIDf.MaxLength = 3
            Me.columnsForm990LineNumEZ.AllowDBNull = false
            Me.columnsForm990LineNumEZ.MaxLength = 25
            Me.columnn990LnEZ.AllowDBNull = false
            Me.columns990PartEZ.AllowDBNull = false
            Me.columns990PartEZ.MaxLength = 15
            Me.columnsForm990LineNumP7.AllowDBNull = false
            Me.columnsForm990LineNumP7.MaxLength = 25
            Me.columnn990LnP7.AllowDBNull = false
            Me.columns990PartP7.AllowDBNull = false
            Me.columns990PartP7.MaxLength = 15
            Me.columns990ColiP7.AllowDBNull = false
            Me.columns990ColiP7.MaxLength = 15
            Me.columns990ColAP7.AllowDBNull = false
            Me.columns990ColAP7.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAcctCode_0Row() As tblAcctCode_0Row
            Return CType(Me.NewRow,tblAcctCode_0Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAcctCode_0Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAcctCode_0Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAcctCode_0RowChangedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_0RowChanged(Me, New tblAcctCode_0RowChangeEvent(CType(e.Row,tblAcctCode_0Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAcctCode_0RowChangingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_0RowChanging(Me, New tblAcctCode_0RowChangeEvent(CType(e.Row,tblAcctCode_0Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAcctCode_0RowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_0RowDeleted(Me, New tblAcctCode_0RowChangeEvent(CType(e.Row,tblAcctCode_0Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAcctCode_0RowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_0RowDeleting(Me, New tblAcctCode_0RowChangeEvent(CType(e.Row,tblAcctCode_0Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAcctCode_0Row(ByVal row As tblAcctCode_0Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSage = New dsSage
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAcctCode_0DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAcctCode_3DataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAcctCode_3Row)
        
        Private columnsCodeID As Global.System.Data.DataColumn
        
        Private columnsStatus As Global.System.Data.DataColumn
        
        Private columnsTitle As Global.System.Data.DataColumn
        
        Private columnsShortTitle As Global.System.Data.DataColumn
        
        Private columnsType As Global.System.Data.DataColumn
        
        Private columnsDesignationCode As Global.System.Data.DataColumn
        
        Private columnsLastCheckNum As Global.System.Data.DataColumn
        
        Private columnsCheckReminder As Global.System.Data.DataColumn
        
        Private columnsForm990LineNum As Global.System.Data.DataColumn
        
        Private columnn990Ln As Global.System.Data.DataColumn
        
        Private columns990Part As Global.System.Data.DataColumn
        
        Private columnsCurrencyIDf As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumEZ As Global.System.Data.DataColumn
        
        Private columnn990LnEZ As Global.System.Data.DataColumn
        
        Private columns990PartEZ As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumP7 As Global.System.Data.DataColumn
        
        Private columnn990LnP7 As Global.System.Data.DataColumn
        
        Private columns990PartP7 As Global.System.Data.DataColumn
        
        Private columns990ColiP7 As Global.System.Data.DataColumn
        
        Private columns990ColAP7 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAcctCode_3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCodeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCodeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sShortTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsShortTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDesignationCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDesignationCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sLastCheckNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsLastCheckNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCheckReminderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCheckReminder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990Ln
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990Part
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCurrencyIDfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCurrencyIDf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColiP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColiP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColAP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColAP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAcctCode_3Row
            Get
                Return CType(Me.Rows(index),tblAcctCode_3Row)
            End Get
        End Property
        
        Public Event tblAcctCode_3RowChanging As tblAcctCode_3RowChangeEventHandler
        
        Public Event tblAcctCode_3RowChanged As tblAcctCode_3RowChangeEventHandler
        
        Public Event tblAcctCode_3RowDeleting As tblAcctCode_3RowChangeEventHandler
        
        Public Event tblAcctCode_3RowDeleted As tblAcctCode_3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAcctCode_3Row(ByVal row As tblAcctCode_3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAcctCode_3Row( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As tblAcctCode_3Row
            Dim rowtblAcctCode_3Row As tblAcctCode_3Row = CType(Me.NewRow,tblAcctCode_3Row)
            Dim columnValuesArray() As Object = New Object() {sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheckNum, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990LineNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990ColiP7, s990ColAP7}
            rowtblAcctCode_3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAcctCode_3Row)
            Return rowtblAcctCode_3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAcctCode_3DataTable = CType(MyBase.Clone,tblAcctCode_3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAcctCode_3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsCodeID = MyBase.Columns("sCodeID")
            Me.columnsStatus = MyBase.Columns("sStatus")
            Me.columnsTitle = MyBase.Columns("sTitle")
            Me.columnsShortTitle = MyBase.Columns("sShortTitle")
            Me.columnsType = MyBase.Columns("sType")
            Me.columnsDesignationCode = MyBase.Columns("sDesignationCode")
            Me.columnsLastCheckNum = MyBase.Columns("sLastCheckNum")
            Me.columnsCheckReminder = MyBase.Columns("sCheckReminder")
            Me.columnsForm990LineNum = MyBase.Columns("sForm990LineNum")
            Me.columnn990Ln = MyBase.Columns("n990Ln")
            Me.columns990Part = MyBase.Columns("s990Part")
            Me.columnsCurrencyIDf = MyBase.Columns("sCurrencyIDf")
            Me.columnsForm990LineNumEZ = MyBase.Columns("sForm990LineNumEZ")
            Me.columnn990LnEZ = MyBase.Columns("n990LnEZ")
            Me.columns990PartEZ = MyBase.Columns("s990PartEZ")
            Me.columnsForm990LineNumP7 = MyBase.Columns("sForm990LineNumP7")
            Me.columnn990LnP7 = MyBase.Columns("n990LnP7")
            Me.columns990PartP7 = MyBase.Columns("s990PartP7")
            Me.columns990ColiP7 = MyBase.Columns("s990ColiP7")
            Me.columns990ColAP7 = MyBase.Columns("s990ColAP7")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsCodeID = New Global.System.Data.DataColumn("sCodeID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCodeID)
            Me.columnsStatus = New Global.System.Data.DataColumn("sStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsStatus)
            Me.columnsTitle = New Global.System.Data.DataColumn("sTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsTitle)
            Me.columnsShortTitle = New Global.System.Data.DataColumn("sShortTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsShortTitle)
            Me.columnsType = New Global.System.Data.DataColumn("sType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsType)
            Me.columnsDesignationCode = New Global.System.Data.DataColumn("sDesignationCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDesignationCode)
            Me.columnsLastCheckNum = New Global.System.Data.DataColumn("sLastCheckNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsLastCheckNum)
            Me.columnsCheckReminder = New Global.System.Data.DataColumn("sCheckReminder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCheckReminder)
            Me.columnsForm990LineNum = New Global.System.Data.DataColumn("sForm990LineNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNum)
            Me.columnn990Ln = New Global.System.Data.DataColumn("n990Ln", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990Ln)
            Me.columns990Part = New Global.System.Data.DataColumn("s990Part", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990Part)
            Me.columnsCurrencyIDf = New Global.System.Data.DataColumn("sCurrencyIDf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCurrencyIDf)
            Me.columnsForm990LineNumEZ = New Global.System.Data.DataColumn("sForm990LineNumEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumEZ)
            Me.columnn990LnEZ = New Global.System.Data.DataColumn("n990LnEZ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnEZ)
            Me.columns990PartEZ = New Global.System.Data.DataColumn("s990PartEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartEZ)
            Me.columnsForm990LineNumP7 = New Global.System.Data.DataColumn("sForm990LineNumP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumP7)
            Me.columnn990LnP7 = New Global.System.Data.DataColumn("n990LnP7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnP7)
            Me.columns990PartP7 = New Global.System.Data.DataColumn("s990PartP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartP7)
            Me.columns990ColiP7 = New Global.System.Data.DataColumn("s990ColiP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColiP7)
            Me.columns990ColAP7 = New Global.System.Data.DataColumn("s990ColAP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColAP7)
            Me.columnsCodeID.AllowDBNull = false
            Me.columnsCodeID.MaxLength = 6
            Me.columnsStatus.AllowDBNull = false
            Me.columnsStatus.MaxLength = 2
            Me.columnsTitle.AllowDBNull = false
            Me.columnsTitle.MaxLength = 60
            Me.columnsShortTitle.AllowDBNull = false
            Me.columnsShortTitle.MaxLength = 15
            Me.columnsType.AllowDBNull = false
            Me.columnsType.MaxLength = 3
            Me.columnsDesignationCode.AllowDBNull = false
            Me.columnsDesignationCode.MaxLength = 3
            Me.columnsLastCheckNum.AllowDBNull = false
            Me.columnsLastCheckNum.MaxLength = 30
            Me.columnsCheckReminder.AllowDBNull = false
            Me.columnsCheckReminder.MaxLength = 30
            Me.columnsForm990LineNum.AllowDBNull = false
            Me.columnsForm990LineNum.MaxLength = 25
            Me.columnn990Ln.AllowDBNull = false
            Me.columns990Part.AllowDBNull = false
            Me.columns990Part.MaxLength = 15
            Me.columnsCurrencyIDf.AllowDBNull = false
            Me.columnsCurrencyIDf.MaxLength = 3
            Me.columnsForm990LineNumEZ.AllowDBNull = false
            Me.columnsForm990LineNumEZ.MaxLength = 25
            Me.columnn990LnEZ.AllowDBNull = false
            Me.columns990PartEZ.AllowDBNull = false
            Me.columns990PartEZ.MaxLength = 15
            Me.columnsForm990LineNumP7.AllowDBNull = false
            Me.columnsForm990LineNumP7.MaxLength = 25
            Me.columnn990LnP7.AllowDBNull = false
            Me.columns990PartP7.AllowDBNull = false
            Me.columns990PartP7.MaxLength = 15
            Me.columns990ColiP7.AllowDBNull = false
            Me.columns990ColiP7.MaxLength = 15
            Me.columns990ColAP7.AllowDBNull = false
            Me.columns990ColAP7.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAcctCode_3Row() As tblAcctCode_3Row
            Return CType(Me.NewRow,tblAcctCode_3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAcctCode_3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAcctCode_3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAcctCode_3RowChangedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_3RowChanged(Me, New tblAcctCode_3RowChangeEvent(CType(e.Row,tblAcctCode_3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAcctCode_3RowChangingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_3RowChanging(Me, New tblAcctCode_3RowChangeEvent(CType(e.Row,tblAcctCode_3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAcctCode_3RowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_3RowDeleted(Me, New tblAcctCode_3RowChangeEvent(CType(e.Row,tblAcctCode_3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAcctCode_3RowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_3RowDeleting(Me, New tblAcctCode_3RowChangeEvent(CType(e.Row,tblAcctCode_3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAcctCode_3Row(ByVal row As tblAcctCode_3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSage = New dsSage
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAcctCode_3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAcctCode_4DataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAcctCode_4Row)
        
        Private columnsCodeID As Global.System.Data.DataColumn
        
        Private columnsStatus As Global.System.Data.DataColumn
        
        Private columnsTitle As Global.System.Data.DataColumn
        
        Private columnsShortTitle As Global.System.Data.DataColumn
        
        Private columnsType As Global.System.Data.DataColumn
        
        Private columnsDesignationCode As Global.System.Data.DataColumn
        
        Private columnsLastCheckNum As Global.System.Data.DataColumn
        
        Private columnsCheckReminder As Global.System.Data.DataColumn
        
        Private columnsForm990LineNum As Global.System.Data.DataColumn
        
        Private columnn990Ln As Global.System.Data.DataColumn
        
        Private columns990Part As Global.System.Data.DataColumn
        
        Private columnsCurrencyIDf As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumEZ As Global.System.Data.DataColumn
        
        Private columnn990LnEZ As Global.System.Data.DataColumn
        
        Private columns990PartEZ As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumP7 As Global.System.Data.DataColumn
        
        Private columnn990LnP7 As Global.System.Data.DataColumn
        
        Private columns990PartP7 As Global.System.Data.DataColumn
        
        Private columns990ColiP7 As Global.System.Data.DataColumn
        
        Private columns990ColAP7 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAcctCode_4"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCodeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCodeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sShortTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsShortTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDesignationCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDesignationCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sLastCheckNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsLastCheckNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCheckReminderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCheckReminder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990Ln
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990Part
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCurrencyIDfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCurrencyIDf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColiP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColiP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColAP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColAP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAcctCode_4Row
            Get
                Return CType(Me.Rows(index),tblAcctCode_4Row)
            End Get
        End Property
        
        Public Event tblAcctCode_4RowChanging As tblAcctCode_4RowChangeEventHandler
        
        Public Event tblAcctCode_4RowChanged As tblAcctCode_4RowChangeEventHandler
        
        Public Event tblAcctCode_4RowDeleting As tblAcctCode_4RowChangeEventHandler
        
        Public Event tblAcctCode_4RowDeleted As tblAcctCode_4RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAcctCode_4Row(ByVal row As tblAcctCode_4Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAcctCode_4Row( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As tblAcctCode_4Row
            Dim rowtblAcctCode_4Row As tblAcctCode_4Row = CType(Me.NewRow,tblAcctCode_4Row)
            Dim columnValuesArray() As Object = New Object() {sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheckNum, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990LineNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990ColiP7, s990ColAP7}
            rowtblAcctCode_4Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAcctCode_4Row)
            Return rowtblAcctCode_4Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAcctCode_4DataTable = CType(MyBase.Clone,tblAcctCode_4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAcctCode_4DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsCodeID = MyBase.Columns("sCodeID")
            Me.columnsStatus = MyBase.Columns("sStatus")
            Me.columnsTitle = MyBase.Columns("sTitle")
            Me.columnsShortTitle = MyBase.Columns("sShortTitle")
            Me.columnsType = MyBase.Columns("sType")
            Me.columnsDesignationCode = MyBase.Columns("sDesignationCode")
            Me.columnsLastCheckNum = MyBase.Columns("sLastCheckNum")
            Me.columnsCheckReminder = MyBase.Columns("sCheckReminder")
            Me.columnsForm990LineNum = MyBase.Columns("sForm990LineNum")
            Me.columnn990Ln = MyBase.Columns("n990Ln")
            Me.columns990Part = MyBase.Columns("s990Part")
            Me.columnsCurrencyIDf = MyBase.Columns("sCurrencyIDf")
            Me.columnsForm990LineNumEZ = MyBase.Columns("sForm990LineNumEZ")
            Me.columnn990LnEZ = MyBase.Columns("n990LnEZ")
            Me.columns990PartEZ = MyBase.Columns("s990PartEZ")
            Me.columnsForm990LineNumP7 = MyBase.Columns("sForm990LineNumP7")
            Me.columnn990LnP7 = MyBase.Columns("n990LnP7")
            Me.columns990PartP7 = MyBase.Columns("s990PartP7")
            Me.columns990ColiP7 = MyBase.Columns("s990ColiP7")
            Me.columns990ColAP7 = MyBase.Columns("s990ColAP7")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsCodeID = New Global.System.Data.DataColumn("sCodeID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCodeID)
            Me.columnsStatus = New Global.System.Data.DataColumn("sStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsStatus)
            Me.columnsTitle = New Global.System.Data.DataColumn("sTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsTitle)
            Me.columnsShortTitle = New Global.System.Data.DataColumn("sShortTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsShortTitle)
            Me.columnsType = New Global.System.Data.DataColumn("sType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsType)
            Me.columnsDesignationCode = New Global.System.Data.DataColumn("sDesignationCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDesignationCode)
            Me.columnsLastCheckNum = New Global.System.Data.DataColumn("sLastCheckNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsLastCheckNum)
            Me.columnsCheckReminder = New Global.System.Data.DataColumn("sCheckReminder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCheckReminder)
            Me.columnsForm990LineNum = New Global.System.Data.DataColumn("sForm990LineNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNum)
            Me.columnn990Ln = New Global.System.Data.DataColumn("n990Ln", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990Ln)
            Me.columns990Part = New Global.System.Data.DataColumn("s990Part", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990Part)
            Me.columnsCurrencyIDf = New Global.System.Data.DataColumn("sCurrencyIDf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCurrencyIDf)
            Me.columnsForm990LineNumEZ = New Global.System.Data.DataColumn("sForm990LineNumEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumEZ)
            Me.columnn990LnEZ = New Global.System.Data.DataColumn("n990LnEZ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnEZ)
            Me.columns990PartEZ = New Global.System.Data.DataColumn("s990PartEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartEZ)
            Me.columnsForm990LineNumP7 = New Global.System.Data.DataColumn("sForm990LineNumP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumP7)
            Me.columnn990LnP7 = New Global.System.Data.DataColumn("n990LnP7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnP7)
            Me.columns990PartP7 = New Global.System.Data.DataColumn("s990PartP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartP7)
            Me.columns990ColiP7 = New Global.System.Data.DataColumn("s990ColiP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColiP7)
            Me.columns990ColAP7 = New Global.System.Data.DataColumn("s990ColAP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColAP7)
            Me.columnsCodeID.AllowDBNull = false
            Me.columnsCodeID.MaxLength = 4
            Me.columnsStatus.AllowDBNull = false
            Me.columnsStatus.MaxLength = 2
            Me.columnsTitle.AllowDBNull = false
            Me.columnsTitle.MaxLength = 60
            Me.columnsShortTitle.AllowDBNull = false
            Me.columnsShortTitle.MaxLength = 15
            Me.columnsType.AllowDBNull = false
            Me.columnsType.MaxLength = 3
            Me.columnsDesignationCode.AllowDBNull = false
            Me.columnsDesignationCode.MaxLength = 3
            Me.columnsLastCheckNum.AllowDBNull = false
            Me.columnsLastCheckNum.MaxLength = 30
            Me.columnsCheckReminder.AllowDBNull = false
            Me.columnsCheckReminder.MaxLength = 30
            Me.columnsForm990LineNum.AllowDBNull = false
            Me.columnsForm990LineNum.MaxLength = 25
            Me.columnn990Ln.AllowDBNull = false
            Me.columns990Part.AllowDBNull = false
            Me.columns990Part.MaxLength = 15
            Me.columnsCurrencyIDf.AllowDBNull = false
            Me.columnsCurrencyIDf.MaxLength = 3
            Me.columnsForm990LineNumEZ.AllowDBNull = false
            Me.columnsForm990LineNumEZ.MaxLength = 25
            Me.columnn990LnEZ.AllowDBNull = false
            Me.columns990PartEZ.AllowDBNull = false
            Me.columns990PartEZ.MaxLength = 15
            Me.columnsForm990LineNumP7.AllowDBNull = false
            Me.columnsForm990LineNumP7.MaxLength = 25
            Me.columnn990LnP7.AllowDBNull = false
            Me.columns990PartP7.AllowDBNull = false
            Me.columns990PartP7.MaxLength = 15
            Me.columns990ColiP7.AllowDBNull = false
            Me.columns990ColiP7.MaxLength = 15
            Me.columns990ColAP7.AllowDBNull = false
            Me.columns990ColAP7.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAcctCode_4Row() As tblAcctCode_4Row
            Return CType(Me.NewRow,tblAcctCode_4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAcctCode_4Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAcctCode_4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAcctCode_4RowChangedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_4RowChanged(Me, New tblAcctCode_4RowChangeEvent(CType(e.Row,tblAcctCode_4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAcctCode_4RowChangingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_4RowChanging(Me, New tblAcctCode_4RowChangeEvent(CType(e.Row,tblAcctCode_4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAcctCode_4RowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_4RowDeleted(Me, New tblAcctCode_4RowChangeEvent(CType(e.Row,tblAcctCode_4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAcctCode_4RowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_4RowDeleting(Me, New tblAcctCode_4RowChangeEvent(CType(e.Row,tblAcctCode_4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAcctCode_4Row(ByVal row As tblAcctCode_4Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSage = New dsSage
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAcctCode_4DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAcctCode_5DataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAcctCode_5Row)
        
        Private columnsCodeID As Global.System.Data.DataColumn
        
        Private columnsStatus As Global.System.Data.DataColumn
        
        Private columnsTitle As Global.System.Data.DataColumn
        
        Private columnsShortTitle As Global.System.Data.DataColumn
        
        Private columnsType As Global.System.Data.DataColumn
        
        Private columnsDesignationCode As Global.System.Data.DataColumn
        
        Private columnsLastCheckNum As Global.System.Data.DataColumn
        
        Private columnsCheckReminder As Global.System.Data.DataColumn
        
        Private columnsForm990LineNum As Global.System.Data.DataColumn
        
        Private columnn990Ln As Global.System.Data.DataColumn
        
        Private columns990Part As Global.System.Data.DataColumn
        
        Private columnsCurrencyIDf As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumEZ As Global.System.Data.DataColumn
        
        Private columnn990LnEZ As Global.System.Data.DataColumn
        
        Private columns990PartEZ As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumP7 As Global.System.Data.DataColumn
        
        Private columnn990LnP7 As Global.System.Data.DataColumn
        
        Private columns990PartP7 As Global.System.Data.DataColumn
        
        Private columns990ColiP7 As Global.System.Data.DataColumn
        
        Private columns990ColAP7 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAcctCode_5"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCodeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCodeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sShortTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsShortTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDesignationCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDesignationCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sLastCheckNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsLastCheckNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCheckReminderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCheckReminder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990Ln
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990Part
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCurrencyIDfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCurrencyIDf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColiP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColiP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColAP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColAP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAcctCode_5Row
            Get
                Return CType(Me.Rows(index),tblAcctCode_5Row)
            End Get
        End Property
        
        Public Event tblAcctCode_5RowChanging As tblAcctCode_5RowChangeEventHandler
        
        Public Event tblAcctCode_5RowChanged As tblAcctCode_5RowChangeEventHandler
        
        Public Event tblAcctCode_5RowDeleting As tblAcctCode_5RowChangeEventHandler
        
        Public Event tblAcctCode_5RowDeleted As tblAcctCode_5RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAcctCode_5Row(ByVal row As tblAcctCode_5Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAcctCode_5Row( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As tblAcctCode_5Row
            Dim rowtblAcctCode_5Row As tblAcctCode_5Row = CType(Me.NewRow,tblAcctCode_5Row)
            Dim columnValuesArray() As Object = New Object() {sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheckNum, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990LineNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990ColiP7, s990ColAP7}
            rowtblAcctCode_5Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAcctCode_5Row)
            Return rowtblAcctCode_5Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAcctCode_5DataTable = CType(MyBase.Clone,tblAcctCode_5DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAcctCode_5DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsCodeID = MyBase.Columns("sCodeID")
            Me.columnsStatus = MyBase.Columns("sStatus")
            Me.columnsTitle = MyBase.Columns("sTitle")
            Me.columnsShortTitle = MyBase.Columns("sShortTitle")
            Me.columnsType = MyBase.Columns("sType")
            Me.columnsDesignationCode = MyBase.Columns("sDesignationCode")
            Me.columnsLastCheckNum = MyBase.Columns("sLastCheckNum")
            Me.columnsCheckReminder = MyBase.Columns("sCheckReminder")
            Me.columnsForm990LineNum = MyBase.Columns("sForm990LineNum")
            Me.columnn990Ln = MyBase.Columns("n990Ln")
            Me.columns990Part = MyBase.Columns("s990Part")
            Me.columnsCurrencyIDf = MyBase.Columns("sCurrencyIDf")
            Me.columnsForm990LineNumEZ = MyBase.Columns("sForm990LineNumEZ")
            Me.columnn990LnEZ = MyBase.Columns("n990LnEZ")
            Me.columns990PartEZ = MyBase.Columns("s990PartEZ")
            Me.columnsForm990LineNumP7 = MyBase.Columns("sForm990LineNumP7")
            Me.columnn990LnP7 = MyBase.Columns("n990LnP7")
            Me.columns990PartP7 = MyBase.Columns("s990PartP7")
            Me.columns990ColiP7 = MyBase.Columns("s990ColiP7")
            Me.columns990ColAP7 = MyBase.Columns("s990ColAP7")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsCodeID = New Global.System.Data.DataColumn("sCodeID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCodeID)
            Me.columnsStatus = New Global.System.Data.DataColumn("sStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsStatus)
            Me.columnsTitle = New Global.System.Data.DataColumn("sTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsTitle)
            Me.columnsShortTitle = New Global.System.Data.DataColumn("sShortTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsShortTitle)
            Me.columnsType = New Global.System.Data.DataColumn("sType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsType)
            Me.columnsDesignationCode = New Global.System.Data.DataColumn("sDesignationCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDesignationCode)
            Me.columnsLastCheckNum = New Global.System.Data.DataColumn("sLastCheckNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsLastCheckNum)
            Me.columnsCheckReminder = New Global.System.Data.DataColumn("sCheckReminder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCheckReminder)
            Me.columnsForm990LineNum = New Global.System.Data.DataColumn("sForm990LineNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNum)
            Me.columnn990Ln = New Global.System.Data.DataColumn("n990Ln", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990Ln)
            Me.columns990Part = New Global.System.Data.DataColumn("s990Part", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990Part)
            Me.columnsCurrencyIDf = New Global.System.Data.DataColumn("sCurrencyIDf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCurrencyIDf)
            Me.columnsForm990LineNumEZ = New Global.System.Data.DataColumn("sForm990LineNumEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumEZ)
            Me.columnn990LnEZ = New Global.System.Data.DataColumn("n990LnEZ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnEZ)
            Me.columns990PartEZ = New Global.System.Data.DataColumn("s990PartEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartEZ)
            Me.columnsForm990LineNumP7 = New Global.System.Data.DataColumn("sForm990LineNumP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumP7)
            Me.columnn990LnP7 = New Global.System.Data.DataColumn("n990LnP7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnP7)
            Me.columns990PartP7 = New Global.System.Data.DataColumn("s990PartP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartP7)
            Me.columns990ColiP7 = New Global.System.Data.DataColumn("s990ColiP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColiP7)
            Me.columns990ColAP7 = New Global.System.Data.DataColumn("s990ColAP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColAP7)
            Me.columnsCodeID.AllowDBNull = false
            Me.columnsCodeID.MaxLength = 3
            Me.columnsStatus.AllowDBNull = false
            Me.columnsStatus.MaxLength = 2
            Me.columnsTitle.AllowDBNull = false
            Me.columnsTitle.MaxLength = 60
            Me.columnsShortTitle.AllowDBNull = false
            Me.columnsShortTitle.MaxLength = 15
            Me.columnsType.AllowDBNull = false
            Me.columnsType.MaxLength = 3
            Me.columnsDesignationCode.AllowDBNull = false
            Me.columnsDesignationCode.MaxLength = 3
            Me.columnsLastCheckNum.AllowDBNull = false
            Me.columnsLastCheckNum.MaxLength = 30
            Me.columnsCheckReminder.AllowDBNull = false
            Me.columnsCheckReminder.MaxLength = 30
            Me.columnsForm990LineNum.AllowDBNull = false
            Me.columnsForm990LineNum.MaxLength = 25
            Me.columnn990Ln.AllowDBNull = false
            Me.columns990Part.AllowDBNull = false
            Me.columns990Part.MaxLength = 15
            Me.columnsCurrencyIDf.AllowDBNull = false
            Me.columnsCurrencyIDf.MaxLength = 3
            Me.columnsForm990LineNumEZ.AllowDBNull = false
            Me.columnsForm990LineNumEZ.MaxLength = 25
            Me.columnn990LnEZ.AllowDBNull = false
            Me.columns990PartEZ.AllowDBNull = false
            Me.columns990PartEZ.MaxLength = 15
            Me.columnsForm990LineNumP7.AllowDBNull = false
            Me.columnsForm990LineNumP7.MaxLength = 25
            Me.columnn990LnP7.AllowDBNull = false
            Me.columns990PartP7.AllowDBNull = false
            Me.columns990PartP7.MaxLength = 15
            Me.columns990ColiP7.AllowDBNull = false
            Me.columns990ColiP7.MaxLength = 15
            Me.columns990ColAP7.AllowDBNull = false
            Me.columns990ColAP7.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAcctCode_5Row() As tblAcctCode_5Row
            Return CType(Me.NewRow,tblAcctCode_5Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAcctCode_5Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAcctCode_5Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAcctCode_5RowChangedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_5RowChanged(Me, New tblAcctCode_5RowChangeEvent(CType(e.Row,tblAcctCode_5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAcctCode_5RowChangingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_5RowChanging(Me, New tblAcctCode_5RowChangeEvent(CType(e.Row,tblAcctCode_5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAcctCode_5RowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_5RowDeleted(Me, New tblAcctCode_5RowChangeEvent(CType(e.Row,tblAcctCode_5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAcctCode_5RowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_5RowDeleting(Me, New tblAcctCode_5RowChangeEvent(CType(e.Row,tblAcctCode_5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAcctCode_5Row(ByVal row As tblAcctCode_5Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSage = New dsSage
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAcctCode_5DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAcctCode_9DataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAcctCode_9Row)
        
        Private columnsCodeID As Global.System.Data.DataColumn
        
        Private columnsStatus As Global.System.Data.DataColumn
        
        Private columnsTitle As Global.System.Data.DataColumn
        
        Private columnsShortTitle As Global.System.Data.DataColumn
        
        Private columnsType As Global.System.Data.DataColumn
        
        Private columnsDesignationCode As Global.System.Data.DataColumn
        
        Private columnsLastCheckNum As Global.System.Data.DataColumn
        
        Private columnsCheckReminder As Global.System.Data.DataColumn
        
        Private columnsForm990LineNum As Global.System.Data.DataColumn
        
        Private columnn990Ln As Global.System.Data.DataColumn
        
        Private columns990Part As Global.System.Data.DataColumn
        
        Private columnsCurrencyIDf As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumEZ As Global.System.Data.DataColumn
        
        Private columnn990LnEZ As Global.System.Data.DataColumn
        
        Private columns990PartEZ As Global.System.Data.DataColumn
        
        Private columnsForm990LineNumP7 As Global.System.Data.DataColumn
        
        Private columnn990LnP7 As Global.System.Data.DataColumn
        
        Private columns990PartP7 As Global.System.Data.DataColumn
        
        Private columns990ColiP7 As Global.System.Data.DataColumn
        
        Private columns990ColAP7 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAcctCode_9"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCodeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCodeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sShortTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsShortTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDesignationCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDesignationCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sLastCheckNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsLastCheckNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCheckReminderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCheckReminder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990Ln
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990Part
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCurrencyIDfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCurrencyIDf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartEZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartEZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sForm990LineNumP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsForm990LineNumP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property n990LnP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnn990LnP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990PartP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990PartP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColiP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColiP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property s990ColAP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columns990ColAP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAcctCode_9Row
            Get
                Return CType(Me.Rows(index),tblAcctCode_9Row)
            End Get
        End Property
        
        Public Event tblAcctCode_9RowChanging As tblAcctCode_9RowChangeEventHandler
        
        Public Event tblAcctCode_9RowChanged As tblAcctCode_9RowChangeEventHandler
        
        Public Event tblAcctCode_9RowDeleting As tblAcctCode_9RowChangeEventHandler
        
        Public Event tblAcctCode_9RowDeleted As tblAcctCode_9RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAcctCode_9Row(ByVal row As tblAcctCode_9Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAcctCode_9Row( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As tblAcctCode_9Row
            Dim rowtblAcctCode_9Row As tblAcctCode_9Row = CType(Me.NewRow,tblAcctCode_9Row)
            Dim columnValuesArray() As Object = New Object() {sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheckNum, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990LineNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990ColiP7, s990ColAP7}
            rowtblAcctCode_9Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAcctCode_9Row)
            Return rowtblAcctCode_9Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAcctCode_9DataTable = CType(MyBase.Clone,tblAcctCode_9DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAcctCode_9DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsCodeID = MyBase.Columns("sCodeID")
            Me.columnsStatus = MyBase.Columns("sStatus")
            Me.columnsTitle = MyBase.Columns("sTitle")
            Me.columnsShortTitle = MyBase.Columns("sShortTitle")
            Me.columnsType = MyBase.Columns("sType")
            Me.columnsDesignationCode = MyBase.Columns("sDesignationCode")
            Me.columnsLastCheckNum = MyBase.Columns("sLastCheckNum")
            Me.columnsCheckReminder = MyBase.Columns("sCheckReminder")
            Me.columnsForm990LineNum = MyBase.Columns("sForm990LineNum")
            Me.columnn990Ln = MyBase.Columns("n990Ln")
            Me.columns990Part = MyBase.Columns("s990Part")
            Me.columnsCurrencyIDf = MyBase.Columns("sCurrencyIDf")
            Me.columnsForm990LineNumEZ = MyBase.Columns("sForm990LineNumEZ")
            Me.columnn990LnEZ = MyBase.Columns("n990LnEZ")
            Me.columns990PartEZ = MyBase.Columns("s990PartEZ")
            Me.columnsForm990LineNumP7 = MyBase.Columns("sForm990LineNumP7")
            Me.columnn990LnP7 = MyBase.Columns("n990LnP7")
            Me.columns990PartP7 = MyBase.Columns("s990PartP7")
            Me.columns990ColiP7 = MyBase.Columns("s990ColiP7")
            Me.columns990ColAP7 = MyBase.Columns("s990ColAP7")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsCodeID = New Global.System.Data.DataColumn("sCodeID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCodeID)
            Me.columnsStatus = New Global.System.Data.DataColumn("sStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsStatus)
            Me.columnsTitle = New Global.System.Data.DataColumn("sTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsTitle)
            Me.columnsShortTitle = New Global.System.Data.DataColumn("sShortTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsShortTitle)
            Me.columnsType = New Global.System.Data.DataColumn("sType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsType)
            Me.columnsDesignationCode = New Global.System.Data.DataColumn("sDesignationCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDesignationCode)
            Me.columnsLastCheckNum = New Global.System.Data.DataColumn("sLastCheckNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsLastCheckNum)
            Me.columnsCheckReminder = New Global.System.Data.DataColumn("sCheckReminder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCheckReminder)
            Me.columnsForm990LineNum = New Global.System.Data.DataColumn("sForm990LineNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNum)
            Me.columnn990Ln = New Global.System.Data.DataColumn("n990Ln", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990Ln)
            Me.columns990Part = New Global.System.Data.DataColumn("s990Part", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990Part)
            Me.columnsCurrencyIDf = New Global.System.Data.DataColumn("sCurrencyIDf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCurrencyIDf)
            Me.columnsForm990LineNumEZ = New Global.System.Data.DataColumn("sForm990LineNumEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumEZ)
            Me.columnn990LnEZ = New Global.System.Data.DataColumn("n990LnEZ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnEZ)
            Me.columns990PartEZ = New Global.System.Data.DataColumn("s990PartEZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartEZ)
            Me.columnsForm990LineNumP7 = New Global.System.Data.DataColumn("sForm990LineNumP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsForm990LineNumP7)
            Me.columnn990LnP7 = New Global.System.Data.DataColumn("n990LnP7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnn990LnP7)
            Me.columns990PartP7 = New Global.System.Data.DataColumn("s990PartP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990PartP7)
            Me.columns990ColiP7 = New Global.System.Data.DataColumn("s990ColiP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColiP7)
            Me.columns990ColAP7 = New Global.System.Data.DataColumn("s990ColAP7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns990ColAP7)
            Me.columnsCodeID.AllowDBNull = false
            Me.columnsCodeID.MaxLength = 8
            Me.columnsStatus.AllowDBNull = false
            Me.columnsStatus.MaxLength = 2
            Me.columnsTitle.AllowDBNull = false
            Me.columnsTitle.MaxLength = 60
            Me.columnsShortTitle.AllowDBNull = false
            Me.columnsShortTitle.MaxLength = 15
            Me.columnsType.AllowDBNull = false
            Me.columnsType.MaxLength = 3
            Me.columnsDesignationCode.AllowDBNull = false
            Me.columnsDesignationCode.MaxLength = 3
            Me.columnsLastCheckNum.AllowDBNull = false
            Me.columnsLastCheckNum.MaxLength = 30
            Me.columnsCheckReminder.AllowDBNull = false
            Me.columnsCheckReminder.MaxLength = 30
            Me.columnsForm990LineNum.AllowDBNull = false
            Me.columnsForm990LineNum.MaxLength = 25
            Me.columnn990Ln.AllowDBNull = false
            Me.columns990Part.AllowDBNull = false
            Me.columns990Part.MaxLength = 15
            Me.columnsCurrencyIDf.AllowDBNull = false
            Me.columnsCurrencyIDf.MaxLength = 3
            Me.columnsForm990LineNumEZ.AllowDBNull = false
            Me.columnsForm990LineNumEZ.MaxLength = 25
            Me.columnn990LnEZ.AllowDBNull = false
            Me.columns990PartEZ.AllowDBNull = false
            Me.columns990PartEZ.MaxLength = 15
            Me.columnsForm990LineNumP7.AllowDBNull = false
            Me.columnsForm990LineNumP7.MaxLength = 25
            Me.columnn990LnP7.AllowDBNull = false
            Me.columns990PartP7.AllowDBNull = false
            Me.columns990PartP7.MaxLength = 15
            Me.columns990ColiP7.AllowDBNull = false
            Me.columns990ColiP7.MaxLength = 15
            Me.columns990ColAP7.AllowDBNull = false
            Me.columns990ColAP7.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAcctCode_9Row() As tblAcctCode_9Row
            Return CType(Me.NewRow,tblAcctCode_9Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAcctCode_9Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAcctCode_9Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAcctCode_9RowChangedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_9RowChanged(Me, New tblAcctCode_9RowChangeEvent(CType(e.Row,tblAcctCode_9Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAcctCode_9RowChangingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_9RowChanging(Me, New tblAcctCode_9RowChangeEvent(CType(e.Row,tblAcctCode_9Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAcctCode_9RowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_9RowDeleted(Me, New tblAcctCode_9RowChangeEvent(CType(e.Row,tblAcctCode_9Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAcctCode_9RowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAcctCode_9RowDeleting(Me, New tblAcctCode_9RowChangeEvent(CType(e.Row,tblAcctCode_9Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAcctCode_9Row(ByVal row As tblAcctCode_9Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSage = New dsSage
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAcctCode_9DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAcctCode_0Row
        Inherits Global.System.Data.DataRow
        
        Private tabletblAcctCode_0 As tblAcctCode_0DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAcctCode_0 = CType(Me.Table,tblAcctCode_0DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCodeID() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sCodeIDColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sCodeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sStatus() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sStatusColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sShortTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sShortTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sShortTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sType() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sTypeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDesignationCode() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sDesignationCodeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sDesignationCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sLastCheckNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sLastCheckNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sLastCheckNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCheckReminder() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sCheckReminderColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sCheckReminderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sForm990LineNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sForm990LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990Ln() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_0.n990LnColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.n990LnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990Part() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.s990PartColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.s990PartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCurrencyIDf() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sCurrencyIDfColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sCurrencyIDfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sForm990LineNumEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sForm990LineNumEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnEZ() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_0.n990LnEZColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.n990LnEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.s990PartEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.s990PartEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.sForm990LineNumP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.sForm990LineNumP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnP7() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_0.n990LnP7Column),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.n990LnP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.s990PartP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.s990PartP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColiP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.s990ColiP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.s990ColiP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColAP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_0.s990ColAP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_0.s990ColAP7Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAcctCode_3Row
        Inherits Global.System.Data.DataRow
        
        Private tabletblAcctCode_3 As tblAcctCode_3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAcctCode_3 = CType(Me.Table,tblAcctCode_3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCodeID() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sCodeIDColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sCodeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sStatus() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sStatusColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sShortTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sShortTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sShortTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sType() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sTypeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDesignationCode() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sDesignationCodeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sDesignationCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sLastCheckNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sLastCheckNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sLastCheckNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCheckReminder() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sCheckReminderColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sCheckReminderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sForm990LineNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sForm990LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990Ln() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_3.n990LnColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.n990LnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990Part() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.s990PartColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.s990PartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCurrencyIDf() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sCurrencyIDfColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sCurrencyIDfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sForm990LineNumEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sForm990LineNumEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnEZ() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_3.n990LnEZColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.n990LnEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.s990PartEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.s990PartEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.sForm990LineNumP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.sForm990LineNumP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnP7() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_3.n990LnP7Column),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.n990LnP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.s990PartP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.s990PartP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColiP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.s990ColiP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.s990ColiP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColAP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_3.s990ColAP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_3.s990ColAP7Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAcctCode_4Row
        Inherits Global.System.Data.DataRow
        
        Private tabletblAcctCode_4 As tblAcctCode_4DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAcctCode_4 = CType(Me.Table,tblAcctCode_4DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCodeID() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sCodeIDColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sCodeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sStatus() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sStatusColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sShortTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sShortTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sShortTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sType() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sTypeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDesignationCode() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sDesignationCodeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sDesignationCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sLastCheckNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sLastCheckNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sLastCheckNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCheckReminder() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sCheckReminderColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sCheckReminderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sForm990LineNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sForm990LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990Ln() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_4.n990LnColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.n990LnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990Part() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.s990PartColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.s990PartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCurrencyIDf() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sCurrencyIDfColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sCurrencyIDfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sForm990LineNumEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sForm990LineNumEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnEZ() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_4.n990LnEZColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.n990LnEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.s990PartEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.s990PartEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.sForm990LineNumP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.sForm990LineNumP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnP7() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_4.n990LnP7Column),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.n990LnP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.s990PartP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.s990PartP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColiP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.s990ColiP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.s990ColiP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColAP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_4.s990ColAP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_4.s990ColAP7Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAcctCode_5Row
        Inherits Global.System.Data.DataRow
        
        Private tabletblAcctCode_5 As tblAcctCode_5DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAcctCode_5 = CType(Me.Table,tblAcctCode_5DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCodeID() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sCodeIDColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sCodeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sStatus() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sStatusColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sShortTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sShortTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sShortTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sType() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sTypeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDesignationCode() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sDesignationCodeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sDesignationCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sLastCheckNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sLastCheckNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sLastCheckNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCheckReminder() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sCheckReminderColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sCheckReminderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sForm990LineNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sForm990LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990Ln() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_5.n990LnColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.n990LnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990Part() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.s990PartColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.s990PartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCurrencyIDf() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sCurrencyIDfColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sCurrencyIDfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sForm990LineNumEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sForm990LineNumEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnEZ() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_5.n990LnEZColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.n990LnEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.s990PartEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.s990PartEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.sForm990LineNumP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.sForm990LineNumP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnP7() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_5.n990LnP7Column),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.n990LnP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.s990PartP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.s990PartP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColiP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.s990ColiP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.s990ColiP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColAP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_5.s990ColAP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_5.s990ColAP7Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAcctCode_9Row
        Inherits Global.System.Data.DataRow
        
        Private tabletblAcctCode_9 As tblAcctCode_9DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAcctCode_9 = CType(Me.Table,tblAcctCode_9DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCodeID() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sCodeIDColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sCodeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sStatus() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sStatusColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sShortTitle() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sShortTitleColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sShortTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sType() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sTypeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDesignationCode() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sDesignationCodeColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sDesignationCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sLastCheckNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sLastCheckNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sLastCheckNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCheckReminder() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sCheckReminderColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sCheckReminderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNum() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sForm990LineNumColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sForm990LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990Ln() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_9.n990LnColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.n990LnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990Part() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.s990PartColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.s990PartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCurrencyIDf() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sCurrencyIDfColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sCurrencyIDfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sForm990LineNumEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sForm990LineNumEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnEZ() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_9.n990LnEZColumn),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.n990LnEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartEZ() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.s990PartEZColumn),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.s990PartEZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sForm990LineNumP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.sForm990LineNumP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.sForm990LineNumP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property n990LnP7() As Integer
            Get
                Return CType(Me(Me.tabletblAcctCode_9.n990LnP7Column),Integer)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.n990LnP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990PartP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.s990PartP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.s990PartP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColiP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.s990ColiP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.s990ColiP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property s990ColAP7() As String
            Get
                Return CType(Me(Me.tabletblAcctCode_9.s990ColAP7Column),String)
            End Get
            Set
                Me(Me.tabletblAcctCode_9.s990ColAP7Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAcctCode_0RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAcctCode_0Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAcctCode_0Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAcctCode_0Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAcctCode_3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAcctCode_3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAcctCode_3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAcctCode_3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAcctCode_4RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAcctCode_4Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAcctCode_4Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAcctCode_4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAcctCode_5RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAcctCode_5Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAcctCode_5Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAcctCode_5Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAcctCode_9RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAcctCode_9Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAcctCode_9Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAcctCode_9Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsSageTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblAcctCode_0TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblAcctCode_0"
            tableMapping.ColumnMappings.Add("sCodeID", "sCodeID")
            tableMapping.ColumnMappings.Add("sStatus", "sStatus")
            tableMapping.ColumnMappings.Add("sTitle", "sTitle")
            tableMapping.ColumnMappings.Add("sShortTitle", "sShortTitle")
            tableMapping.ColumnMappings.Add("sType", "sType")
            tableMapping.ColumnMappings.Add("sDesignationCode", "sDesignationCode")
            tableMapping.ColumnMappings.Add("sLastCheckNum", "sLastCheckNum")
            tableMapping.ColumnMappings.Add("sCheckReminder", "sCheckReminder")
            tableMapping.ColumnMappings.Add("sForm990LineNum", "sForm990LineNum")
            tableMapping.ColumnMappings.Add("n990Ln", "n990Ln")
            tableMapping.ColumnMappings.Add("s990Part", "s990Part")
            tableMapping.ColumnMappings.Add("sCurrencyIDf", "sCurrencyIDf")
            tableMapping.ColumnMappings.Add("sForm990LineNumEZ", "sForm990LineNumEZ")
            tableMapping.ColumnMappings.Add("n990LnEZ", "n990LnEZ")
            tableMapping.ColumnMappings.Add("s990PartEZ", "s990PartEZ")
            tableMapping.ColumnMappings.Add("sForm990LineNumP7", "sForm990LineNumP7")
            tableMapping.ColumnMappings.Add("n990LnP7", "n990LnP7")
            tableMapping.ColumnMappings.Add("s990PartP7", "s990PartP7")
            tableMapping.ColumnMappings.Add("s990ColiP7", "s990ColiP7")
            tableMapping.ColumnMappings.Add("s990ColAP7", "s990ColAP7")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblAcctCode_0] ([sCodeID], [sStatus], [sTitle], [sShortTitle],"& _ 
                " [sType], [sDesignationCode], [sLastCheckNum], [sCheckReminder], [sForm990LineNu"& _ 
                "m], [n990Ln], [s990Part], [sCurrencyIDf], [sForm990LineNumEZ], [n990LnEZ], [s990"& _ 
                "PartEZ], [sForm990LineNumP7], [n990LnP7], [s990PartP7], [s990ColiP7], [s990ColAP"& _ 
                "7]) VALUES (@sCodeID, @sStatus, @sTitle, @sShortTitle, @sType, @sDesignationCode"& _ 
                ", @sLastCheckNum, @sCheckReminder, @sForm990LineNum, @n990Ln, @s990Part, @sCurre"& _ 
                "ncyIDf, @sForm990LineNumEZ, @n990LnEZ, @s990PartEZ, @sForm990LineNumP7, @n990LnP"& _ 
                "7, @s990PartP7, @s990ColiP7, @s990ColAP7)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCodeID", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCodeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sStatus", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sShortTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sShortTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sType", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sDesignationCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sDesignationCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sLastCheckNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sLastCheckNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCheckReminder", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCheckReminder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990Ln", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990Ln", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990Part", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990Part", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCurrencyIDf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCurrencyIDf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnEZ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnP7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColiP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColiP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColAP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColAP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("SAGE_DBConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheck"& _ 
                "Num, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990Li"& _ 
                "neNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990Coli"& _ 
                "P7, s990ColAP7 FROM dbo.tblAcctCode_0"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSage.tblAcctCode_0DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSage.tblAcctCode_0DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSage.tblAcctCode_0DataTable = New dsSage.tblAcctCode_0DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSage.tblAcctCode_0DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSage) As Integer
            Return Me.Adapter.Update(dataSet, "tblAcctCode_0")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As Integer
            If (sCodeID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCodeID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(sCodeID,String)
            End If
            If (sStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sStatus")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sStatus,String)
            End If
            If (sTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(sTitle,String)
            End If
            If (sShortTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sShortTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(sShortTitle,String)
            End If
            If (sType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sType")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(sType,String)
            End If
            If (sDesignationCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sDesignationCode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(sDesignationCode,String)
            End If
            If (sLastCheckNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sLastCheckNum")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(sLastCheckNum,String)
            End If
            If (sCheckReminder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCheckReminder")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(sCheckReminder,String)
            End If
            If (sForm990LineNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNum")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(sForm990LineNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(n990Ln,Integer)
            If (s990Part Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990Part")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(s990Part,String)
            End If
            If (sCurrencyIDf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCurrencyIDf")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sCurrencyIDf,String)
            End If
            If (sForm990LineNumEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sForm990LineNumEZ,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(n990LnEZ,Integer)
            If (s990PartEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(s990PartEZ,String)
            End If
            If (sForm990LineNumP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumP7")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(sForm990LineNumP7,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(n990LnP7,Integer)
            If (s990PartP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartP7")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(s990PartP7,String)
            End If
            If (s990ColiP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColiP7")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(s990ColiP7,String)
            End If
            If (s990ColAP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColAP7")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(s990ColAP7,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblAcctCode_3TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblAcctCode_3"
            tableMapping.ColumnMappings.Add("sCodeID", "sCodeID")
            tableMapping.ColumnMappings.Add("sStatus", "sStatus")
            tableMapping.ColumnMappings.Add("sTitle", "sTitle")
            tableMapping.ColumnMappings.Add("sShortTitle", "sShortTitle")
            tableMapping.ColumnMappings.Add("sType", "sType")
            tableMapping.ColumnMappings.Add("sDesignationCode", "sDesignationCode")
            tableMapping.ColumnMappings.Add("sLastCheckNum", "sLastCheckNum")
            tableMapping.ColumnMappings.Add("sCheckReminder", "sCheckReminder")
            tableMapping.ColumnMappings.Add("sForm990LineNum", "sForm990LineNum")
            tableMapping.ColumnMappings.Add("n990Ln", "n990Ln")
            tableMapping.ColumnMappings.Add("s990Part", "s990Part")
            tableMapping.ColumnMappings.Add("sCurrencyIDf", "sCurrencyIDf")
            tableMapping.ColumnMappings.Add("sForm990LineNumEZ", "sForm990LineNumEZ")
            tableMapping.ColumnMappings.Add("n990LnEZ", "n990LnEZ")
            tableMapping.ColumnMappings.Add("s990PartEZ", "s990PartEZ")
            tableMapping.ColumnMappings.Add("sForm990LineNumP7", "sForm990LineNumP7")
            tableMapping.ColumnMappings.Add("n990LnP7", "n990LnP7")
            tableMapping.ColumnMappings.Add("s990PartP7", "s990PartP7")
            tableMapping.ColumnMappings.Add("s990ColiP7", "s990ColiP7")
            tableMapping.ColumnMappings.Add("s990ColAP7", "s990ColAP7")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblAcctCode_3] ([sCodeID], [sStatus], [sTitle], [sShortTitle],"& _ 
                " [sType], [sDesignationCode], [sLastCheckNum], [sCheckReminder], [sForm990LineNu"& _ 
                "m], [n990Ln], [s990Part], [sCurrencyIDf], [sForm990LineNumEZ], [n990LnEZ], [s990"& _ 
                "PartEZ], [sForm990LineNumP7], [n990LnP7], [s990PartP7], [s990ColiP7], [s990ColAP"& _ 
                "7]) VALUES (@sCodeID, @sStatus, @sTitle, @sShortTitle, @sType, @sDesignationCode"& _ 
                ", @sLastCheckNum, @sCheckReminder, @sForm990LineNum, @n990Ln, @s990Part, @sCurre"& _ 
                "ncyIDf, @sForm990LineNumEZ, @n990LnEZ, @s990PartEZ, @sForm990LineNumP7, @n990LnP"& _ 
                "7, @s990PartP7, @s990ColiP7, @s990ColAP7)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCodeID", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCodeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sStatus", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sShortTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sShortTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sType", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sDesignationCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sDesignationCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sLastCheckNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sLastCheckNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCheckReminder", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCheckReminder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990Ln", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990Ln", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990Part", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990Part", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCurrencyIDf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCurrencyIDf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnEZ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnP7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColiP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColiP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColAP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColAP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("SAGE_DBConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheck"& _ 
                "Num, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990Li"& _ 
                "neNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990Coli"& _ 
                "P7, s990ColAP7 FROM dbo.tblAcctCode_3"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSage.tblAcctCode_3DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSage.tblAcctCode_3DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSage.tblAcctCode_3DataTable = New dsSage.tblAcctCode_3DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSage.tblAcctCode_3DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSage) As Integer
            Return Me.Adapter.Update(dataSet, "tblAcctCode_3")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As Integer
            If (sCodeID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCodeID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(sCodeID,String)
            End If
            If (sStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sStatus")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sStatus,String)
            End If
            If (sTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(sTitle,String)
            End If
            If (sShortTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sShortTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(sShortTitle,String)
            End If
            If (sType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sType")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(sType,String)
            End If
            If (sDesignationCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sDesignationCode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(sDesignationCode,String)
            End If
            If (sLastCheckNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sLastCheckNum")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(sLastCheckNum,String)
            End If
            If (sCheckReminder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCheckReminder")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(sCheckReminder,String)
            End If
            If (sForm990LineNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNum")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(sForm990LineNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(n990Ln,Integer)
            If (s990Part Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990Part")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(s990Part,String)
            End If
            If (sCurrencyIDf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCurrencyIDf")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sCurrencyIDf,String)
            End If
            If (sForm990LineNumEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sForm990LineNumEZ,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(n990LnEZ,Integer)
            If (s990PartEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(s990PartEZ,String)
            End If
            If (sForm990LineNumP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumP7")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(sForm990LineNumP7,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(n990LnP7,Integer)
            If (s990PartP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartP7")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(s990PartP7,String)
            End If
            If (s990ColiP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColiP7")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(s990ColiP7,String)
            End If
            If (s990ColAP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColAP7")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(s990ColAP7,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblAcctCode_4TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblAcctCode_4"
            tableMapping.ColumnMappings.Add("sCodeID", "sCodeID")
            tableMapping.ColumnMappings.Add("sStatus", "sStatus")
            tableMapping.ColumnMappings.Add("sTitle", "sTitle")
            tableMapping.ColumnMappings.Add("sShortTitle", "sShortTitle")
            tableMapping.ColumnMappings.Add("sType", "sType")
            tableMapping.ColumnMappings.Add("sDesignationCode", "sDesignationCode")
            tableMapping.ColumnMappings.Add("sLastCheckNum", "sLastCheckNum")
            tableMapping.ColumnMappings.Add("sCheckReminder", "sCheckReminder")
            tableMapping.ColumnMappings.Add("sForm990LineNum", "sForm990LineNum")
            tableMapping.ColumnMappings.Add("n990Ln", "n990Ln")
            tableMapping.ColumnMappings.Add("s990Part", "s990Part")
            tableMapping.ColumnMappings.Add("sCurrencyIDf", "sCurrencyIDf")
            tableMapping.ColumnMappings.Add("sForm990LineNumEZ", "sForm990LineNumEZ")
            tableMapping.ColumnMappings.Add("n990LnEZ", "n990LnEZ")
            tableMapping.ColumnMappings.Add("s990PartEZ", "s990PartEZ")
            tableMapping.ColumnMappings.Add("sForm990LineNumP7", "sForm990LineNumP7")
            tableMapping.ColumnMappings.Add("n990LnP7", "n990LnP7")
            tableMapping.ColumnMappings.Add("s990PartP7", "s990PartP7")
            tableMapping.ColumnMappings.Add("s990ColiP7", "s990ColiP7")
            tableMapping.ColumnMappings.Add("s990ColAP7", "s990ColAP7")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblAcctCode_4] ([sCodeID], [sStatus], [sTitle], [sShortTitle],"& _ 
                " [sType], [sDesignationCode], [sLastCheckNum], [sCheckReminder], [sForm990LineNu"& _ 
                "m], [n990Ln], [s990Part], [sCurrencyIDf], [sForm990LineNumEZ], [n990LnEZ], [s990"& _ 
                "PartEZ], [sForm990LineNumP7], [n990LnP7], [s990PartP7], [s990ColiP7], [s990ColAP"& _ 
                "7]) VALUES (@sCodeID, @sStatus, @sTitle, @sShortTitle, @sType, @sDesignationCode"& _ 
                ", @sLastCheckNum, @sCheckReminder, @sForm990LineNum, @n990Ln, @s990Part, @sCurre"& _ 
                "ncyIDf, @sForm990LineNumEZ, @n990LnEZ, @s990PartEZ, @sForm990LineNumP7, @n990LnP"& _ 
                "7, @s990PartP7, @s990ColiP7, @s990ColAP7)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCodeID", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCodeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sStatus", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sShortTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sShortTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sType", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sDesignationCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sDesignationCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sLastCheckNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sLastCheckNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCheckReminder", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCheckReminder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990Ln", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990Ln", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990Part", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990Part", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCurrencyIDf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCurrencyIDf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnEZ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnP7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColiP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColiP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColAP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColAP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("SAGE_DBConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheck"& _ 
                "Num, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990Li"& _ 
                "neNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990Coli"& _ 
                "P7, s990ColAP7 FROM dbo.tblAcctCode_4"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSage.tblAcctCode_4DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSage.tblAcctCode_4DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSage.tblAcctCode_4DataTable = New dsSage.tblAcctCode_4DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSage.tblAcctCode_4DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSage) As Integer
            Return Me.Adapter.Update(dataSet, "tblAcctCode_4")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As Integer
            If (sCodeID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCodeID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(sCodeID,String)
            End If
            If (sStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sStatus")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sStatus,String)
            End If
            If (sTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(sTitle,String)
            End If
            If (sShortTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sShortTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(sShortTitle,String)
            End If
            If (sType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sType")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(sType,String)
            End If
            If (sDesignationCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sDesignationCode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(sDesignationCode,String)
            End If
            If (sLastCheckNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sLastCheckNum")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(sLastCheckNum,String)
            End If
            If (sCheckReminder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCheckReminder")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(sCheckReminder,String)
            End If
            If (sForm990LineNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNum")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(sForm990LineNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(n990Ln,Integer)
            If (s990Part Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990Part")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(s990Part,String)
            End If
            If (sCurrencyIDf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCurrencyIDf")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sCurrencyIDf,String)
            End If
            If (sForm990LineNumEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sForm990LineNumEZ,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(n990LnEZ,Integer)
            If (s990PartEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(s990PartEZ,String)
            End If
            If (sForm990LineNumP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumP7")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(sForm990LineNumP7,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(n990LnP7,Integer)
            If (s990PartP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartP7")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(s990PartP7,String)
            End If
            If (s990ColiP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColiP7")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(s990ColiP7,String)
            End If
            If (s990ColAP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColAP7")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(s990ColAP7,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblAcctCode_5TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblAcctCode_5"
            tableMapping.ColumnMappings.Add("sCodeID", "sCodeID")
            tableMapping.ColumnMappings.Add("sStatus", "sStatus")
            tableMapping.ColumnMappings.Add("sTitle", "sTitle")
            tableMapping.ColumnMappings.Add("sShortTitle", "sShortTitle")
            tableMapping.ColumnMappings.Add("sType", "sType")
            tableMapping.ColumnMappings.Add("sDesignationCode", "sDesignationCode")
            tableMapping.ColumnMappings.Add("sLastCheckNum", "sLastCheckNum")
            tableMapping.ColumnMappings.Add("sCheckReminder", "sCheckReminder")
            tableMapping.ColumnMappings.Add("sForm990LineNum", "sForm990LineNum")
            tableMapping.ColumnMappings.Add("n990Ln", "n990Ln")
            tableMapping.ColumnMappings.Add("s990Part", "s990Part")
            tableMapping.ColumnMappings.Add("sCurrencyIDf", "sCurrencyIDf")
            tableMapping.ColumnMappings.Add("sForm990LineNumEZ", "sForm990LineNumEZ")
            tableMapping.ColumnMappings.Add("n990LnEZ", "n990LnEZ")
            tableMapping.ColumnMappings.Add("s990PartEZ", "s990PartEZ")
            tableMapping.ColumnMappings.Add("sForm990LineNumP7", "sForm990LineNumP7")
            tableMapping.ColumnMappings.Add("n990LnP7", "n990LnP7")
            tableMapping.ColumnMappings.Add("s990PartP7", "s990PartP7")
            tableMapping.ColumnMappings.Add("s990ColiP7", "s990ColiP7")
            tableMapping.ColumnMappings.Add("s990ColAP7", "s990ColAP7")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblAcctCode_5] ([sCodeID], [sStatus], [sTitle], [sShortTitle],"& _ 
                " [sType], [sDesignationCode], [sLastCheckNum], [sCheckReminder], [sForm990LineNu"& _ 
                "m], [n990Ln], [s990Part], [sCurrencyIDf], [sForm990LineNumEZ], [n990LnEZ], [s990"& _ 
                "PartEZ], [sForm990LineNumP7], [n990LnP7], [s990PartP7], [s990ColiP7], [s990ColAP"& _ 
                "7]) VALUES (@sCodeID, @sStatus, @sTitle, @sShortTitle, @sType, @sDesignationCode"& _ 
                ", @sLastCheckNum, @sCheckReminder, @sForm990LineNum, @n990Ln, @s990Part, @sCurre"& _ 
                "ncyIDf, @sForm990LineNumEZ, @n990LnEZ, @s990PartEZ, @sForm990LineNumP7, @n990LnP"& _ 
                "7, @s990PartP7, @s990ColiP7, @s990ColAP7)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCodeID", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCodeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sStatus", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sShortTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sShortTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sType", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sDesignationCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sDesignationCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sLastCheckNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sLastCheckNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCheckReminder", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCheckReminder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990Ln", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990Ln", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990Part", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990Part", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCurrencyIDf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCurrencyIDf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnEZ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnP7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColiP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColiP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColAP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColAP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("SAGE_DBConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheck"& _ 
                "Num, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990Li"& _ 
                "neNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990Coli"& _ 
                "P7, s990ColAP7 FROM dbo.tblAcctCode_5"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSage.tblAcctCode_5DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSage.tblAcctCode_5DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSage.tblAcctCode_5DataTable = New dsSage.tblAcctCode_5DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSage.tblAcctCode_5DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSage) As Integer
            Return Me.Adapter.Update(dataSet, "tblAcctCode_5")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As Integer
            If (sCodeID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCodeID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(sCodeID,String)
            End If
            If (sStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sStatus")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sStatus,String)
            End If
            If (sTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(sTitle,String)
            End If
            If (sShortTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sShortTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(sShortTitle,String)
            End If
            If (sType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sType")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(sType,String)
            End If
            If (sDesignationCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sDesignationCode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(sDesignationCode,String)
            End If
            If (sLastCheckNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sLastCheckNum")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(sLastCheckNum,String)
            End If
            If (sCheckReminder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCheckReminder")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(sCheckReminder,String)
            End If
            If (sForm990LineNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNum")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(sForm990LineNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(n990Ln,Integer)
            If (s990Part Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990Part")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(s990Part,String)
            End If
            If (sCurrencyIDf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCurrencyIDf")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sCurrencyIDf,String)
            End If
            If (sForm990LineNumEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sForm990LineNumEZ,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(n990LnEZ,Integer)
            If (s990PartEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(s990PartEZ,String)
            End If
            If (sForm990LineNumP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumP7")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(sForm990LineNumP7,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(n990LnP7,Integer)
            If (s990PartP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartP7")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(s990PartP7,String)
            End If
            If (s990ColiP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColiP7")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(s990ColiP7,String)
            End If
            If (s990ColAP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColAP7")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(s990ColAP7,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblAcctCode_9TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblAcctCode_9"
            tableMapping.ColumnMappings.Add("sCodeID", "sCodeID")
            tableMapping.ColumnMappings.Add("sStatus", "sStatus")
            tableMapping.ColumnMappings.Add("sTitle", "sTitle")
            tableMapping.ColumnMappings.Add("sShortTitle", "sShortTitle")
            tableMapping.ColumnMappings.Add("sType", "sType")
            tableMapping.ColumnMappings.Add("sDesignationCode", "sDesignationCode")
            tableMapping.ColumnMappings.Add("sLastCheckNum", "sLastCheckNum")
            tableMapping.ColumnMappings.Add("sCheckReminder", "sCheckReminder")
            tableMapping.ColumnMappings.Add("sForm990LineNum", "sForm990LineNum")
            tableMapping.ColumnMappings.Add("n990Ln", "n990Ln")
            tableMapping.ColumnMappings.Add("s990Part", "s990Part")
            tableMapping.ColumnMappings.Add("sCurrencyIDf", "sCurrencyIDf")
            tableMapping.ColumnMappings.Add("sForm990LineNumEZ", "sForm990LineNumEZ")
            tableMapping.ColumnMappings.Add("n990LnEZ", "n990LnEZ")
            tableMapping.ColumnMappings.Add("s990PartEZ", "s990PartEZ")
            tableMapping.ColumnMappings.Add("sForm990LineNumP7", "sForm990LineNumP7")
            tableMapping.ColumnMappings.Add("n990LnP7", "n990LnP7")
            tableMapping.ColumnMappings.Add("s990PartP7", "s990PartP7")
            tableMapping.ColumnMappings.Add("s990ColiP7", "s990ColiP7")
            tableMapping.ColumnMappings.Add("s990ColAP7", "s990ColAP7")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblAcctCode_9] ([sCodeID], [sStatus], [sTitle], [sShortTitle],"& _ 
                " [sType], [sDesignationCode], [sLastCheckNum], [sCheckReminder], [sForm990LineNu"& _ 
                "m], [n990Ln], [s990Part], [sCurrencyIDf], [sForm990LineNumEZ], [n990LnEZ], [s990"& _ 
                "PartEZ], [sForm990LineNumP7], [n990LnP7], [s990PartP7], [s990ColiP7], [s990ColAP"& _ 
                "7]) VALUES (@sCodeID, @sStatus, @sTitle, @sShortTitle, @sType, @sDesignationCode"& _ 
                ", @sLastCheckNum, @sCheckReminder, @sForm990LineNum, @n990Ln, @s990Part, @sCurre"& _ 
                "ncyIDf, @sForm990LineNumEZ, @n990LnEZ, @s990PartEZ, @sForm990LineNumP7, @n990LnP"& _ 
                "7, @s990PartP7, @s990ColiP7, @s990ColAP7)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCodeID", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCodeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sStatus", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sShortTitle", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sShortTitle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sType", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sDesignationCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sDesignationCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sLastCheckNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sLastCheckNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCheckReminder", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCheckReminder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990Ln", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990Ln", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990Part", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990Part", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sCurrencyIDf", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sCurrencyIDf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnEZ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartEZ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartEZ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sForm990LineNumP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sForm990LineNumP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@n990LnP7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "n990LnP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990PartP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990PartP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColiP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColiP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s990ColAP7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s990ColAP7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("SAGE_DBConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT sCodeID, sStatus, sTitle, sShortTitle, sType, sDesignationCode, sLastCheck"& _ 
                "Num, sCheckReminder, sForm990LineNum, n990Ln, s990Part, sCurrencyIDf, sForm990Li"& _ 
                "neNumEZ, n990LnEZ, s990PartEZ, sForm990LineNumP7, n990LnP7, s990PartP7, s990Coli"& _ 
                "P7, s990ColAP7 FROM dbo.tblAcctCode_9"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSage.tblAcctCode_9DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSage.tblAcctCode_9DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSage.tblAcctCode_9DataTable = New dsSage.tblAcctCode_9DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSage.tblAcctCode_9DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSage) As Integer
            Return Me.Adapter.Update(dataSet, "tblAcctCode_9")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sCodeID As String,  _
                    ByVal sStatus As String,  _
                    ByVal sTitle As String,  _
                    ByVal sShortTitle As String,  _
                    ByVal sType As String,  _
                    ByVal sDesignationCode As String,  _
                    ByVal sLastCheckNum As String,  _
                    ByVal sCheckReminder As String,  _
                    ByVal sForm990LineNum As String,  _
                    ByVal n990Ln As Integer,  _
                    ByVal s990Part As String,  _
                    ByVal sCurrencyIDf As String,  _
                    ByVal sForm990LineNumEZ As String,  _
                    ByVal n990LnEZ As Integer,  _
                    ByVal s990PartEZ As String,  _
                    ByVal sForm990LineNumP7 As String,  _
                    ByVal n990LnP7 As Integer,  _
                    ByVal s990PartP7 As String,  _
                    ByVal s990ColiP7 As String,  _
                    ByVal s990ColAP7 As String) As Integer
            If (sCodeID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCodeID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(sCodeID,String)
            End If
            If (sStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sStatus")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sStatus,String)
            End If
            If (sTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(sTitle,String)
            End If
            If (sShortTitle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sShortTitle")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(sShortTitle,String)
            End If
            If (sType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sType")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(sType,String)
            End If
            If (sDesignationCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sDesignationCode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(sDesignationCode,String)
            End If
            If (sLastCheckNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sLastCheckNum")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(sLastCheckNum,String)
            End If
            If (sCheckReminder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCheckReminder")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(sCheckReminder,String)
            End If
            If (sForm990LineNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNum")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(sForm990LineNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(n990Ln,Integer)
            If (s990Part Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990Part")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(s990Part,String)
            End If
            If (sCurrencyIDf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sCurrencyIDf")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sCurrencyIDf,String)
            End If
            If (sForm990LineNumEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sForm990LineNumEZ,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(n990LnEZ,Integer)
            If (s990PartEZ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartEZ")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(s990PartEZ,String)
            End If
            If (sForm990LineNumP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sForm990LineNumP7")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(sForm990LineNumP7,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(n990LnP7,Integer)
            If (s990PartP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990PartP7")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(s990PartP7,String)
            End If
            If (s990ColiP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColiP7")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(s990ColiP7,String)
            End If
            If (s990ColAP7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s990ColAP7")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(s990ColAP7,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _tblAcctCode_0TableAdapter As tblAcctCode_0TableAdapter
        
        Private _tblAcctCode_3TableAdapter As tblAcctCode_3TableAdapter
        
        Private _tblAcctCode_4TableAdapter As tblAcctCode_4TableAdapter
        
        Private _tblAcctCode_5TableAdapter As tblAcctCode_5TableAdapter
        
        Private _tblAcctCode_9TableAdapter As tblAcctCode_9TableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblAcctCode_0TableAdapter() As tblAcctCode_0TableAdapter
            Get
                Return Me._tblAcctCode_0TableAdapter
            End Get
            Set
                Me._tblAcctCode_0TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblAcctCode_3TableAdapter() As tblAcctCode_3TableAdapter
            Get
                Return Me._tblAcctCode_3TableAdapter
            End Get
            Set
                Me._tblAcctCode_3TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblAcctCode_4TableAdapter() As tblAcctCode_4TableAdapter
            Get
                Return Me._tblAcctCode_4TableAdapter
            End Get
            Set
                Me._tblAcctCode_4TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblAcctCode_5TableAdapter() As tblAcctCode_5TableAdapter
            Get
                Return Me._tblAcctCode_5TableAdapter
            End Get
            Set
                Me._tblAcctCode_5TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblAcctCode_9TableAdapter() As tblAcctCode_9TableAdapter
            Get
                Return Me._tblAcctCode_9TableAdapter
            End Get
            Set
                Me._tblAcctCode_9TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._tblAcctCode_0TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblAcctCode_0TableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblAcctCode_0TableAdapter.Connection
                End If
                If ((Not (Me._tblAcctCode_3TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblAcctCode_3TableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblAcctCode_3TableAdapter.Connection
                End If
                If ((Not (Me._tblAcctCode_4TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblAcctCode_4TableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblAcctCode_4TableAdapter.Connection
                End If
                If ((Not (Me._tblAcctCode_5TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblAcctCode_5TableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblAcctCode_5TableAdapter.Connection
                End If
                If ((Not (Me._tblAcctCode_9TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblAcctCode_9TableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblAcctCode_9TableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._tblAcctCode_0TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblAcctCode_3TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblAcctCode_4TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblAcctCode_5TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblAcctCode_9TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsSage, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblAcctCode_5TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_5.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblAcctCode_5TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_9TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_9.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblAcctCode_9TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_4TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_4.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblAcctCode_4TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_0TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_0.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblAcctCode_0TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_3TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_3.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblAcctCode_3TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsSage, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblAcctCode_5TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_5.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblAcctCode_5TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_9TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_9.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblAcctCode_9TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_4TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_4.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblAcctCode_4TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_0TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_0.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblAcctCode_0TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_3TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_3.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblAcctCode_3TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsSage, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblAcctCode_3TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_3.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblAcctCode_3TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_0TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_0.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblAcctCode_0TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_4TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_4.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblAcctCode_4TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_9TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_9.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblAcctCode_9TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblAcctCode_5TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblAcctCode_5.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblAcctCode_5TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsSage) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._tblAcctCode_0TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblAcctCode_0TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblAcctCode_3TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblAcctCode_3TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblAcctCode_4TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblAcctCode_4TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblAcctCode_5TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblAcctCode_5TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblAcctCode_9TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblAcctCode_9TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._tblAcctCode_0TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblAcctCode_0TableAdapter, Me._tblAcctCode_0TableAdapter.Connection)
                    Me._tblAcctCode_0TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_0TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblAcctCode_0TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblAcctCode_0TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblAcctCode_0TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblAcctCode_3TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblAcctCode_3TableAdapter, Me._tblAcctCode_3TableAdapter.Connection)
                    Me._tblAcctCode_3TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_3TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblAcctCode_3TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblAcctCode_3TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblAcctCode_3TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblAcctCode_4TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblAcctCode_4TableAdapter, Me._tblAcctCode_4TableAdapter.Connection)
                    Me._tblAcctCode_4TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_4TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblAcctCode_4TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblAcctCode_4TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblAcctCode_4TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblAcctCode_5TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblAcctCode_5TableAdapter, Me._tblAcctCode_5TableAdapter.Connection)
                    Me._tblAcctCode_5TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_5TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblAcctCode_5TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblAcctCode_5TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblAcctCode_5TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblAcctCode_9TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblAcctCode_9TableAdapter, Me._tblAcctCode_9TableAdapter.Connection)
                    Me._tblAcctCode_9TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_9TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblAcctCode_9TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblAcctCode_9TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblAcctCode_9TableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._tblAcctCode_0TableAdapter) Is Nothing) Then
                    Me._tblAcctCode_0TableAdapter.Connection = CType(revertConnections(Me._tblAcctCode_0TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_0TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblAcctCode_3TableAdapter) Is Nothing) Then
                    Me._tblAcctCode_3TableAdapter.Connection = CType(revertConnections(Me._tblAcctCode_3TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_3TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblAcctCode_4TableAdapter) Is Nothing) Then
                    Me._tblAcctCode_4TableAdapter.Connection = CType(revertConnections(Me._tblAcctCode_4TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_4TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblAcctCode_5TableAdapter) Is Nothing) Then
                    Me._tblAcctCode_5TableAdapter.Connection = CType(revertConnections(Me._tblAcctCode_5TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_5TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblAcctCode_9TableAdapter) Is Nothing) Then
                    Me._tblAcctCode_9TableAdapter.Connection = CType(revertConnections(Me._tblAcctCode_9TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblAcctCode_9TableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
